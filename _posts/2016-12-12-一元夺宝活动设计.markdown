---
layout:     post
title:      "一元夺宝活动设计"
subtitle:   ""
date:       2016-12-12 15:00:00
author:     "donkey"
header-img: "img/in-post/default-bg.jpg"
tags:
    - Java游戏服务器
---


   2016年，人生没有大变化，上半年辞职学习了下游戏前端开发，另外写了十几篇技术文章，下半年本来是准备去拍电影的，拍电影并非是兴趣，只是好奇影片背后的东西，
   当然最后没有去。9月份来到公司参与[《元气战姬学院》](http://ms.163.com/)游戏服务器端开发，项目已经进行了一年多,框架都已经搭好了，剩下要做的只是一些新功能开发。
   责任相较于之前就没有那么重了，而我是一个不喜欢承担太大责任的人，只想着把一些简单的事情做好，再加上工作进度不像以前那样紧凑，这样就有更多时间来思考怎样把一件事情做的更好，
   所以目前对我来说这份工作是我喜欢的。一元夺宝是我做的第二个新功能，第一个是远征。
   目前市场上搞一元夺宝的公司蛮多的。大概就是说，每个玩家出一块钱买一个很贵的东西。然后系统把这些人凑在一起抽签，抽到谁谁就拿走那个东西。
   我们要做的和网易的一元夺宝有些不同的，不同点一：开奖不一定要达到满人次，即只要在规定时间内就可以开奖，如果开奖失败，则返还玩家消耗的游戏币。先说说规则：
   * 页面显示的人次数据所有玩家共享，即服务器要保证不会出现购买次数超出上限
   * 活动定开奖或参与人次满立即开奖，这里服务器要考虑的是如何保证不可控因素(如服务器维护，无法定时开奖和刷新商品)不影响到整个活动流程.
   
# 一、购买
    购买这块主要是保证多个玩家同时购买时不会出现购买次数超出上限的可能，所以每次玩家购买时，我都会先将商品上锁。然而使用锁会导致程序性能低下，这里我做了个简单的优化，把每一个商品作为锁，当某一个商品被锁住时，不影响其他玩家都买别的商品，并且只在同步代码块内处理少量逻辑。
    如图：
    
 ![1](http://liulongling.github.io/img/in-post/2016-12/1.jpg)
    
  代码如下：
  
```
@Override  
   public void lock() throws BuyException {  
       synchronized (item) {  
           //宝物剩余人次已不足  
           if (count > item.remain)  
               throw new BuyException(244005);  
  
           //活动正在开奖  
           if (item.isOpenLottery())  
               throw new BuyException(244011);  
           //商品剩余数量减去购买数量  
           item.remain -= count;  
       }  
   }  
```

# 二、定时刷新商、开奖

      定时的东西大都是是放在一个线程里执行，但线程有可能不会执行它，有可能是人为因素的影响、也有可能是系统本身的问题。总之定时还是少用它为好。假如一开始你的设计是这样：
  到了开奖时间线程准备执行开奖，但是不巧如果服务器恰好在这个时间内需要重启，重启后将会错过开奖时间导致开奖失败。
  所以这里这样设计是不行的，那怎么办？既然找到了问题出在定时这块，那么就做一个非定时的开奖逻辑。很简单，只要在刷新商品时，同时保存该商品的开奖时间，
  只要当前系统时间大于开奖时间则开奖。
     
 ![2](http://liulongling.github.io/img/in-post/2016-12/2.jpg)
    
 ![4](http://liulongling.github.io/img/in-post/2016-12/4.jpg)
    
# 三、规则不严谨

   首先必须说下这个活动本身我们是没有作弊的，但是整个开奖过程全都是由庄家来操作的，难免会有玩家怀疑这个活动的真实性。那么有没有什么办法来
   没有第三方的数字参与开奖，